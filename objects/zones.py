"""Group rooms together."""

from objects import BaseObject
from twisted.internet import reactor
from time import time
import db, logging

logger = logging.getLogger('Zone Objects')

class ZoneObject(BaseObject):
 """Holds rooms."""
 def __init__(self, *args, **kwargs):
  super(ZoneObject, self).__init__(*args, **kwargs)
  self.dump_properties += [
   'reset_interval'
  ]
  db.zones.append(self)
  self.last_reset = 0.0 # The time this zone was last reset.
  self.next_reset = None # The DelayedCallInstance generated by the reset.
  self.reset_interval = 20.0 # Reset interval in minutes.
  self._reset()
 
 def _reset(self):
  """Tries to call self.reset."""
  logger.info('Resetting zone %s.', self.title())
  self.last_reset = time()
  try:
   self.reset()
  except Exception as e:
   logger.critical('While resetting zone %s, the following error was raised:', self.title())
   logger.exception(e)
  finally:
   self.next_reset = reactor.callLater(int(60 * self.reset_interval), self._reset)
 
 def reset(self):
  """Called every self.interval minutes to reset the zone."""
  pass
 
 def destroy(self):
  super(ZoneObject, self).destroy()
  db.zones.remove(self)
